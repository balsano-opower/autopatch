supportsMultipleStatements=true

patches.create=CREATE TABLE patches ( \
	   system_name VARCHAR(30) NOT NULL \
     , patch_level INT4 NOT NULL \
     , patch_date DATE NOT NULL DEFAULT (now()) \
     , patch_in_progress CHAR(1) NOT NULL DEFAULT ('F') \
     , PRIMARY KEY (system_name))

patch_runs.create=CREATE TABLE IF NOT EXISTS patch_runs ( \
       system_name VARCHAR(30) NOT NULL \
     , database_name VARCHAR(50) NOT NULL \
     , patch_level INT4 NOT NULL \
     , patch_name VARCHAR(255) NOT NULL \
     , patch_start TIMESTAMP NOT NULL \
     , patch_stop TIMESTAMP NULL \
     , PRIMARY KEY(system_name, database_name, patch_level))

# Validates that a record exists for a given system
level.create=INSERT INTO patches (system_name, patch_level) VALUES ( ?, 0 )
level.read=SELECT patch_level FROM patches WHERE system_name = ?
level.update=UPDATE patches SET patch_level = ?, patch_date = now() WHERE system_name = ?

# Since most DBs do not have a boolean type, return 0 or 1 row to determine if
# the system is currently locked.
lock.read=SELECT patch_in_progress FROM patches WHERE system_name = ?
lock.obtain=UPDATE patches SET patch_in_progress = 'T' WHERE system_name = ?
lock.release=UPDATE patches SET patch_in_progress = 'F' WHERE system_name = ?

run.create=INSERT INTO patch_runs (system_name, database_name, patch_level, patch_name, patch_start) VALUES ( ?, ?, ?, ?, now() )
run.update=UPDATE patch_runs SET patch_stop = now() WHERE system_name = ? AND database_name = ? AND patch_level = ?
# Used to validate that the patch_runs table exists
run.check=SELECT 1 FROM patch_runs LIMIT 1
