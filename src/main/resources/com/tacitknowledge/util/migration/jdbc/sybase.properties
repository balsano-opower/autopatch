supportsMultipleStatements=false

patches.create=CREATE TABLE patches (\
                system_name VARCHAR(30) NOT NULL PRIMARY KEY,\
                patch_level INT NOT NULL,\
                patch_date DATETIME DEFAULT getdate() NOT NULL,\
                patch_in_progress CHAR(1) DEFAULT 'F' NOT NULL)

patch_runs.create=CREATE TABLE patch_runs ( \
       system_name VARCHAR(30) NOT NULL,\
     , database_name VARCHAR(50) NOT NULL,\
     , patch_level INT NOT NULL \
     , patch_name VARCHAR(255) NOT NULL \
     , patch_start DATETIME NOT NULL \
     , patch_stop DATETIME NULL \
     , PRIMARY KEY(system_name, database_name, patch_level))
                
# Validates that a record exists for a given system
level.create=INSERT INTO patches (system_name, patch_level) VALUES ( ?, 0 )
level.read=SELECT patch_level FROM patches WHERE system_name = ?
level.update=UPDATE patches SET patch_level = ?, patch_date = getdate() WHERE system_name = ?

# Since most DBs do not have a boolean type, return 0 or 1 row to determine if
# the system is currently locked.
lock.read=SELECT patch_in_progress FROM patches WHERE system_name = ?
lock.obtain=UPDATE patches SET patch_in_progress = 'T' WHERE system_name = ? AND patch_in_progress = 'F'
lock.release=UPDATE patches SET patch_in_progress = 'F' WHERE system_name = ?

run.create=INSERT INTO patch_runs (system_name, database_name, patch_level, patch_name, patch_start) VALUES ( ?, ?, ?, ?, getdate() )
run.update=UPDATE patch_runs SET patch_stop = getdate() WHERE system_name = ? AND database_name = ? AND patch_level = ?
# Used to validate that the patch_runs table exists
run.check=SELECT 1 FROM patch_runs LIMIT 1
